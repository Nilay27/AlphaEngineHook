# AlphaEngine Development Guidelines

Use these guidelines to build the **AlphaEngine** copy trading platform.

Write complete code for every step. Show the full implementation, not pseudo-code.

## Overview

This is the **AlphaEngine** copy trading platform built with:

- **Frontend**: Next.js, Tailwind, Shadcn, Framer Motion
- **Backend**: PostgreSQL, Drizzle ORM
- **Auth**: MetaMask wallet connection
- **Deployment**: Vercel

## Project Structure

- `app` - **Next.js app router**
    - `api` - API routes for copy trading functionality
        - `strategies` - Strategy management endpoints
        - `consumer/subscriptions` - Subscription management
        - `confirmations` - Trade confirmation endpoints
    - `alpha-generator/strategies` - Strategy pages
- `components` - **Shared components**
    - `ui` - UI components
    - `utilities` - Utility components
- `db` - **Database schemas**
    - `schema` - Drizzle schemas (strategies, subscriptions, trade-confirmations, user-balances)
- `lib` - **Library code**
    - `cors.ts` - CORS configuration
    - `openapi.ts` - API documentation
    - `ethereum/` - Blockchain utilities

## Core Entities

1. **strategies** - Trading strategies from alpha generators
2. **subscriptions** - User subscriptions to strategies
3. **trade_confirmations** - Trade execution confirmations
4. **user_balances** - User wallet balances tracking

## Rules

### General
- Use `@` imports for internal modules
- Use **kebab-case** for files and folders
- Use PostgreSQL with Drizzle ORM
- MetaMask for authentication
- No Stripe or traditional payments

### Database
- All schemas in `db/schema/` with **kebab-case** naming
- Use `bun run db:push` for schema changes
- Export schemas from `db/schema/index.ts`

### API
- CORS enabled for development and production
- OpenAPI documentation at `/api/docs`
- Consistent response format with `isSuccess` field

### Frontend
- Server components for data fetching
- Client components for user interaction
- MetaMask integration for wallet operations